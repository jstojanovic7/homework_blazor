@page "/01MasterStudents"

@using DSS.Models;

<PageTitle>Master Students</PageTitle>
<h1>Master Students</h1>
<br />
<table>
    <thead>
        <tr>
            <th>First name</th>
            <th>Last name</th>
            <th>Gender</th>
            <th>Street</th>
            <th>City</th>
            <th>Postal Code</th>
            <th>State</th>
            <th>Student ID</th>
            <th>Studies</th>
            <th>Year Level</th>
            <th>Thesis Topic</th>
            <th>Advisor</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (MasterStudent ms in studentCrew)
        {
            <tr>
                <td>@ms.FirstName</td>
                <td>@ms.LastName</td>
                <td>@ms.Gender</td>
                <td>@ms.Address.Street</td>
                <td>@ms.Address.City</td>
                <td>@ms.Address.PostalCode</td>
                <td>@ms.Address.State</td>
                <td>@ms.StudentId</td>
                <td>@ms.Studies</td>
                <td>@ms.YearLevel</td>
                <td>@ms.ThesisTopic</td>
                <td>@ms.Advisor</td>
                <td><button @onclick="() => ShowElectiveSubjectsAndGrades(ms)">Show Elective Subjects and Grades</button></td>
            </tr>
        }
    </tbody>
</table>

@if (selectedStudent != null)
{
    <div>
        <h2>Elective Subjects and Grades for @selectedStudent.FirstName @selectedStudent.LastName</h2>
        <table>
            <thead>
                <tr>
                    <th>Subject Name</th>
                    <th>Score</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var grade in selectedStudent.ElectiveGrades)
                {
                    <tr>
                        <td>@grade.Subject.SubjectName</td>
                        <td>@grade.Score</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {

    private string message = "";
    private MasterStudent[] studentCrew = new MasterStudent[3];
    private MasterStudent selectedStudent;

    protected override async Task OnInitializedAsync()
    {
        studentCrew[0] = new MasterStudent()
{
    FirstName = "Jovan",
    LastName = "Stojanovic",
    Gender = Gender.Male,
    StudentId = 1,
    Studies = "Business Informatics",
    YearLevel = 1,
    Address = new PostalAddress()
    {
        Street = "Vatroslava Lisinskog 8",
        City = "Belgrade",
        PostalCode = "11000",
        State = "Serbia"
    },
    ThesisTopic = "AI in recruiting",
    Advisor = "Dr. Smart",
    ElectiveGrades = new List<Grade>
    {
        new Grade
        {
            Subject = new ElectiveSubject { SubjectName = "Big Data Analytics" },
            Score = 100
        },
        new Grade
        {
            Subject = new ElectiveSubject { SubjectName = "IT Project Management" },
            Score = 95
        }
    }
};
        studentCrew[1] = new MasterStudent()
{
    FirstName = "Jelena",
    LastName = "Mitic",
    Gender = Gender.Female,
    StudentId = 2,
    Studies = "Art History",
    YearLevel = 2,
    Address = new PostalAddress()
    {
        Street = "Vatroslava Lisinskog 8",
        City = "Belgrade",
        PostalCode = "11000",
        State = "Serbia"
    },
    ThesisTopic = "The Greatness of David",
    Advisor = "Dr. Art",
    ElectiveGrades = new List<Grade>
    {
        new Grade
        {
            Subject = new ElectiveSubject { SubjectName = "Painting" },
            Score = 100
        },
        new Grade
        {
            Subject = new ElectiveSubject { SubjectName = "Sculpture" },
            Score = 100
        }
    }
};
        studentCrew[2] = new MasterStudent()
{
    FirstName = "Igor",
    LastName = "Stojanovic",
    Gender = Gender.Male,
    StudentId = 3,
    Studies = "Economics",
    YearLevel = 2,
    Address = new PostalAddress()
    {
        Street = "Mariahilferstrasse",
        City = "Vienna",
        PostalCode = "2809",
        State = "Austria"
    },
    ThesisTopic = "IFRS 17",
    Advisor = "Dr. Economy",
    ElectiveGrades = new List<Grade>
    {
        new Grade
        {
            Subject = new ElectiveSubject { SubjectName = "Taxation" },
            Score = 93
        },
        new Grade
        {
            Subject = new ElectiveSubject { SubjectName = "Quantitative Finance" },
            Score = 92
        }
    }
};
     
    }
    private void ShowElectiveSubjectsAndGrades(MasterStudent student)
    {
        selectedStudent = student;
    }
    
}